pipeline{
    agent none

    environment{
        SONARQUBE_URL = ''
        SONARQUBE_LOGIN = credentials('sonar-login')

    }
    parameters {
        choice(choices: 'Yes\nNo', description: 'Pls choose the environment to deploy', name: 'Deploy')
    }
    // tools{}
    // options{}
    stages{
        stage('Junit and Sonar'){
            agent {
                docker {
                    image 'maven:3-jdk-8'
                    label 'dockernode'
                }
            }
            steps {
                sh 'mvn test verify'
            }
            post {
                success {
                    echo "Success"
                    //junit "target/surefire-reports/*.xml"
                    //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'target/site', reportFiles: 'surefire-report.html', reportName: 'SureFireReportHTML', reportTitles: ''])
                }
            }

        }

        stage('Build'){
            agent {
                dockerfile {
                    filename 'Dockerfile-project'
                    label 'dockernode'
                }
            }
            stages{
                stage('Read the POM'){
                    steps{
                        script{
                            pom = readMavenPom file: 'pom.xml'
                            ARTIFACT_NAME = pom.artifactId.toString()
                        }

                    }
                }
                stage('Packaging'){
                    steps{
                        sh 'mvn clean install'
                    }
                }
                stage('Deploying'){
                    steps{
                        sh 'mvn package -DSkipTests=true'
                        //sh "package name is $ARTIFACT_NAME"
                        stash includes: "target/${ARTIFACT_NAME}.war", name: 'artifact'
                    }
                    post {
                        success {
                            echo "Package has been uploaded to Artifactory Successfully"
                        }
                    }
                }
            }
        }
        stage('Deployment'){
            when {
                beforeAgent true
                expression { params.Deploy == 'Yes'}
            }
            parallel {
                stage('To VM'){
                    agent{ label 'dockernode' }
                    steps{
                        echo "Deploy here to vm"
                    }
                }
                stage('To Image'){
                    agent{ label 'dockernode'}
                    steps{
                        echo "Docker Steps goes here"
                    }
                }
            }
        }
    }
}
